'''
This file is to combine the visualizations of each loss-induced gradients at the contact points
into a single video with larger canvas. The individual videos are generated by the 
HookGradientVisualizer class. 
'''
import cv2
import numpy as np
import os

def combine_four_videos(video_paths, titles, output_path, size=(992*2, 488*3)):
    # Open video captures
    caps = [cv2.VideoCapture(path) for path in video_paths]
    
    # Get video properties
    width = size[0] // 2
    height = size[1] // 3
    fps = caps[0].get(cv2.CAP_PROP_FPS)
    
    # Create VideoWriter object
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(output_path, fourcc, fps, size)
    
    while True:
        frames = []
        all_success = True
        
        # Read frames from all videos
        for cap in caps:
            success, frame = cap.read()
            if not success:
                all_success = False
                break
            # Resize frame to fit quarter of the canvas
            frame = cv2.resize(frame, (width, height))
            frames.append(frame)
            
        if not all_success:
            break
            
        # Create canvas
        canvas = np.ones((size[1], size[0], 3), dtype=np.uint8) * 255
        
        # Place frames in quarters
        positions = [(0, 0), (width, 0), (0, height), (width, height), (int(width/2), height*2)]
        for frame, pos, title in zip(frames, positions, titles):
            x, y = pos
            canvas[y:y+height, x:x+width] = frame
            
            # Add title
            if title is not None:
                cv2.putText(canvas, title, (x+10, y+30), 
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
        
        # Write frame
        out.write(canvas)
    
    # Release everything
    for cap in caps:
        cap.release()
    out.release()


    ### run ffmpeg to convert the output video to mp4
    os.system(f"ffmpeg -i {output_path} -vcodec h264 {output_path.replace('.mp4', '_.mp4')}")
    os.remove(output_path)
    os.rename(output_path.replace('.mp4', '_.mp4'), output_path)


if __name__ == "__main__":
    for frame_id in ['0000', '0005', '0010']:
        video_paths = [
            f"contact_geometry_comp4s_{frame_id}.mp4",
            f"contact_geometry_diss4s_{frame_id}.mp4",
            f"contact_geometry_pen4s_{frame_id}.mp4",
            f"contact_geometry_pred4s_{frame_id}.mp4",
            f"contact_geometry_all4s_{frame_id}.mp4"
        ]
        # titles = ["Complementary @ epoch 0001", "Dissipation", "Penetration", "Prediction", "Overall"]
        titles = [None, None, None, None, None]
        combine_four_videos(video_paths, titles, f"contact_geometry_combined4s_{frame_id}.mp4")
